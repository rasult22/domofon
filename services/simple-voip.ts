import { pb } from '@/queries/client';
import { router } from 'expo-router';
import { Platform } from 'react-native';
import VoipPushNotification from 'react-native-voip-push-notification';

export const initSimpleVoIP = () => {
  console.log('üî• Initializing VoIP Push...');
  
  // –ü–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω (–Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
  VoipPushNotification.addEventListener('register', async (token) => {
    console.log('üì± VoIP Token received (new):', token);
    console.log('üì± Token length:', token.length);
    console.log('üì± auth store is valid:', pb.authStore.isValid);
    const tokenFromPB = await pb.collection('voip_tokens').getFullList({
      filter: `token='${token}'`
    })
    if (!tokenFromPB.length) {
      pb.collection('voip_tokens').create({
        type: Platform.OS,
        token,
        user_id: pb.authStore.record?.id
      })
    }
  });

  // –ü–æ–ª—É—á–∏–ª–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  VoipPushNotification.addEventListener('notification', (notification) => {
    console.log('üîî VoIP Push received:');
    console.log('üîî Raw notification:', notification);
    console.log('üîî Stringified:', JSON.stringify(notification, null, 2));
    console.log('üîî Notification keys:', Object.keys(notification));
    const notificationData = notification as any
    if (notificationData.aps) {
      const payload = notificationData.aps.payload
      console.log('notification payload',payload)
      router.push(`/calling?uuid=${payload.uuid}&call_id=${payload.call_id}`)
    }
  });

  // –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω)
  VoipPushNotification.addEventListener('didLoadWithEvents', (events) => {
    console.log('üì¶ VoIP events loaded:', events);
    console.log('üì¶ Events count:', events?.length || 0);
    if (events && events.length > 0) {
      events.forEach((event, index) => {
        console.log(`üì¶ Event ${index}:`, JSON.stringify(event, null, 2));
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        if (event.name === 'RNVoipPushRemoteNotificationsRegisteredEvent' && event.data) {
          console.log('üì± VoIP Token received (cached):', event.data);
          console.log('üì± Cached token length:', event.data.length);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫
        }
        if (event.name === 'RNVoipPushRemoteNotificationReceivedEvent' && (event.data as any).aps) {
          const payload = (event.data as { aps:{ payload: { uuid: string, call_id: string } }}).aps.payload
          router.push(`/calling?uuid=${payload.uuid}&call_id=${payload.call_id}`)
        }
      });
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  VoipPushNotification.registerVoipToken();
  
  console.log('‚úÖ VoIP listeners registered');
};